Index: src/main/java/it/polimi/ingsw/PSP38/client/Client.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.PSP38.client;\r\n\r\nimport it.polimi.ingsw.PSP38.client.GUIComponents.BoardComponent;\r\nimport it.polimi.ingsw.PSP38.client.GUIComponents.ConnectionComponent;\r\nimport it.polimi.ingsw.PSP38.client.GUIComponents.SetNumOfPlayersComponent;\r\nimport it.polimi.ingsw.PSP38.common.Protocol;\r\nimport it.polimi.ingsw.PSP38.server.utilities.Observer;\r\n\r\nimport javax.swing.*;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.net.InetAddress;\r\nimport java.net.Socket;\r\nimport java.util.Observable;\r\nimport java.util.Scanner;\r\n\r\n\r\n/**\r\n * Executable class for the client side of Santorini\r\n * this class is responsible for showing to users all new messages from the server, the last board updated\r\n * and notify the class Client for all user inputs\r\n */\r\npublic class Client extends Observable implements Observer {\r\n    private final static int SERVER_SOCKET_PORT = 3456;\r\n    private static final Scanner scanner = new Scanner(System.in);\r\n    private static String dataInput;\r\n    private static ServerHandler nextInputObserver;\r\n    private static MessageDecoder messageDecoder;\r\n    private static String customString;\r\n    private static String argument;\r\n    private static BoardComponent sc;\r\n    private static Socket serverSocket;\r\n    private static ConnectionComponent cc;\r\n    private static SetNumOfPlayersComponent snpc;\r\n\r\n    public static void main(String[] args) throws InvocationTargetException, InterruptedException {\r\n        if (args.length==0) {\r\n            SwingUtilities.invokeAndWait(() -> {\r\n                JFrame frame = createUI();\r\n                cc.createConnectionWindow();\r\n                snpc = new SetNumOfPlayersComponent();\r\n                snpc.createNumOfPlayers();\r\n                frame.add(snpc);\r\n            });\r\n        } else if (args[0].equalsIgnoreCase(\"cli\")) {\r\n            messageDecoder = new MessageDecoderCLI();\r\n            try {\r\n                serverSocket = new Socket(InetAddress.getByName(\"127.0.0.1\"), SERVER_SOCKET_PORT);\r\n                System.out.println(InetAddress.getLocalHost());\r\n                ServerHandler serverHandler = new ServerHandler(serverSocket);\r\n                nextInputObserver = serverHandler;\r\n                Thread thread = new Thread(serverHandler);\r\n                thread.start();\r\n            } catch (IOException e) {\r\n                System.out.println(\"server unreachable\");\r\n                return;\r\n            }\r\n            System.out.println(\"Connected\");\r\n            while (true) {\r\n                dataInput = scanner.nextLine();\r\n                notifyReadSomething();\r\n            }\r\n        } else {\r\n            System.out.println(\"Parameter not recognized\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * This method is used to show messages generated by the server on client's screen\r\n     *\r\n     * @param message is the last message received\r\n     */\r\n    private static void printMessage(String message) {\r\n        System.out.println(message);\r\n    }\r\n\r\n    /**\r\n     * This method is used to show the game's board generated by the server on client's screen\r\n     */\r\n    private static void displayBoard() {\r\n        BoardPrinter.printBoard(ServerHandler.readBoard());\r\n    }\r\n\r\n    /**\r\n     * When Client class receives a new protocol from the server this methods call </@printMessage()> or </displayBoard> to show the new update\r\n     */\r\n    @Override\r\n    public void update() {\r\n        Protocol protocolRead = ServerHandler.getProtocol();\r\n        if (protocolRead == Protocol.NOTIFY_MESSAGE) {\r\n            //printMessage(ServerHandler.getMessage());\r\n            messageDecoder.decodeMessage(ServerHandler.getMessage());\r\n        }\r\n        if (protocolRead == Protocol.DISPLAY_BOARD) {\r\n            displayBoard();\r\n        }\r\n        if (protocolRead == Protocol.NOTIFY_CUSTOM_STRING) {\r\n            customString = ServerHandler.getCustomMessageString();\r\n            messageDecoder.update();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return the last data read\r\n     */\r\n    public static String getStringInput() {\r\n        return dataInput;\r\n    }\r\n\r\n    /**\r\n     * notify observers that is available a new data input from the client\r\n     */\r\n    private static void notifyReadSomething() {\r\n        Protocol protocolRead = ServerHandler.getProtocol();\r\n        if (protocolRead == Protocol.ASK_INT || protocolRead == Protocol.ASK_STRING) {\r\n            nextInputObserver.update();\r\n        } else {\r\n            printMessage(\"Please wait\");\r\n        }\r\n\r\n    }\r\n\r\n    public static JFrame createUI() {\r\n        JFrame frame = new JFrame();\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        cc=new ConnectionComponent();\r\n        frame.add(cc);\r\n        frame.getContentPane().setPreferredSize(cc.getPreferredSize());\r\n        frame.pack();\r\n        frame.setVisible(true);\r\n        cc.requestFocusInWindow();\r\n        return frame;\r\n    }\r\n\r\n    public static String getCustomString() {\r\n        return customString;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/client/Client.java	(revision e091db1aa070acb19cc72226ade8c82adfbf9189)
+++ src/main/java/it/polimi/ingsw/PSP38/client/Client.java	(date 1590782065206)
@@ -27,20 +27,22 @@
     private static ServerHandler nextInputObserver;
     private static MessageDecoder messageDecoder;
     private static String customString;
-    private static String argument;
     private static BoardComponent sc;
     private static Socket serverSocket;
     private static ConnectionComponent cc;
     private static SetNumOfPlayersComponent snpc;
+    private static SetupWindow setupWindow;
 
     public static void main(String[] args) throws InvocationTargetException, InterruptedException {
         if (args.length==0) {
             SwingUtilities.invokeAndWait(() -> {
-                JFrame frame = createUI();
+                /*JFrame frame = createUI();
                 cc.createConnectionWindow();
                 snpc = new SetNumOfPlayersComponent();
                 snpc.createNumOfPlayers();
-                frame.add(snpc);
+                frame.add(snpc);*/
+                setupWindow = new SetupWindow();
+                setupWindow.createSetupWindow();
             });
         } else if (args[0].equalsIgnoreCase("cli")) {
             messageDecoder = new MessageDecoderCLI();
Index: src/main/java/it/polimi/ingsw/PSP38/client/MessageDecoderGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\npackage it.polimi.ingsw.PSP38.client;\r\n\r\nimport it.polimi.ingsw.PSP38.common.Message;\r\n\r\n/*public class MessageDecoderGUI implements MessageDecoder{\r\n\r\n    @Override\r\n    public void decodeMessage(Message m) {\r\n\r\n    }\r\n}*/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/client/MessageDecoderGUI.java	(revision e091db1aa070acb19cc72226ade8c82adfbf9189)
+++ src/main/java/it/polimi/ingsw/PSP38/client/MessageDecoderGUI.java	(date 1590779713574)
@@ -1,12 +1,16 @@
-/*
 package it.polimi.ingsw.PSP38.client;
 
 import it.polimi.ingsw.PSP38.common.Message;
 
-/*public class MessageDecoderGUI implements MessageDecoder{
+public class MessageDecoderGUI implements MessageDecoder{
 
     @Override
     public void decodeMessage(Message m) {
 
     }
-}*/
+
+    @Override
+    public void update() {
+
+    }
+}
Index: src/main/java/it/polimi/ingsw/PSP38/client/SetupWindow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.PSP38.client;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class SetupWindow extends JFrame {\r\n    public static final int WIDTH = 600;\r\n    public static final int HEIGHT = 800;\r\n    public SetupWindow(){\r\n        super();\r\n        setSize(WIDTH, HEIGHT);\r\n        setTitle(\"Santorini\");\r\n        setLayout(new GridLayout(3,1));\r\n\r\n        JLabel title=new JLabel(\"santorini\");\r\n        add(title);\r\n\r\n        JPanel controlPanel = new JPanel();\r\n        controlPanel.setLayout(new GridLayout(8,1));\r\n        JLabel ipLabel = new JLabel(\"IP address\");\r\n        controlPanel.add(ipLabel);\r\n        JTextField ipAddress = new JTextField();\r\n        controlPanel.add(ipAddress);\r\n        JLabel nicknameLabel = new JLabel(\"Nickname\");\r\n        controlPanel.add(nicknameLabel);\r\n        JTextField nickname = new JTextField();\r\n        controlPanel.add(nickname);\r\n        JLabel ageLabel = new JLabel(\"Age\");\r\n        controlPanel.add(ageLabel);\r\n        JTextField age = new JTextField();\r\n        controlPanel.add(age);\r\n        JRadioButton guiButton = new JRadioButton(\"Play with GUI\");\r\n        controlPanel.add(guiButton);\r\n        JRadioButton cliButton = new JRadioButton(\"Play with CLI\");\r\n        controlPanel.add(cliButton);\r\n        add(controlPanel);\r\n\r\n        JPanel buttonPanel = new JPanel();\r\n        buttonPanel.setLayout(new FlowLayout());\r\n        JButton connectButton = new JButton(\"Connect to server\");\r\n        buttonPanel.add(connectButton);\r\n        add(buttonPanel);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/client/SetupWindow.java	(revision e091db1aa070acb19cc72226ade8c82adfbf9189)
+++ src/main/java/it/polimi/ingsw/PSP38/client/SetupWindow.java	(date 1590785628617)
@@ -1,44 +1,116 @@
 package it.polimi.ingsw.PSP38.client;
 
+import javax.imageio.ImageIO;
 import javax.swing.*;
 import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.io.File;
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.util.Objects;
+import java.util.Observable;
 
-public class SetupWindow extends JFrame {
+public class SetupWindow extends Observable implements ActionListener {
     public static final int WIDTH = 600;
     public static final int HEIGHT = 800;
-    public SetupWindow(){
-        super();
-        setSize(WIDTH, HEIGHT);
-        setTitle("Santorini");
-        setLayout(new GridLayout(3,1));
+    private JFrame mainSetupFrame = new JFrame();
+    private JPanel setupPanel;
+    private JPanel controlPanel;
+    private JPanel buttonPanel;
+    private JLabel ipLabel;
+    private JTextField ipAddress;
+    private JLabel nicknameLabel;
+    private JTextField nickname;
+    private JLabel ageLabel;
+    private JTextField age;
+    private JButton connectButton;
+    private Color panelColor = new Color(0,0,0,0);
 
-        JLabel title=new JLabel("santorini");
-        add(title);
+    public void createSetupWindow(){
+        mainSetupFrame.setSize(WIDTH, HEIGHT);
+        mainSetupFrame.setTitle("Santorini");
+        mainSetupFrame.add(createSetupPanel());
+        mainSetupFrame.setVisible(true);
+    }
 
-        JPanel controlPanel = new JPanel();
-        controlPanel.setLayout(new GridLayout(8,1));
-        JLabel ipLabel = new JLabel("IP address");
+    public JPanel createSetupPanel(){
+        setupPanel = new JPanel();
+        setupPanel.setLayout(new GridLayout(3,1));
+        Color bkgColor = new Color(255, 0,0);
+        setupPanel.setBackground(bkgColor);
+        setupPanel.add(createImagePanel());
+        setupPanel.add(createControlPanel());
+        setupPanel.add(createButtonPanel());
+        return setupPanel;
+    }
+
+    public JPanel createImagePanel() {
+        Image santoriniLogo=null;
+        JPanel imagePanel= new JPanel();
+        imagePanel.setBackground(panelColor);
+        File dir = null;
+        try {
+            dir = new File(Objects.requireNonNull(ImageCollection.class.getClassLoader()
+                    .getResource("santorini-logo.png")).toURI());
+        } catch (URISyntaxException e) {
+            e.printStackTrace();
+        }
+        try {
+            santoriniLogo= ImageIO.read(dir);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        JLabel logoLabel = new JLabel(new ImageIcon(santoriniLogo));
+        imagePanel.add(logoLabel);
+        return imagePanel;
+    }
+    public JPanel createControlPanel(){
+        controlPanel = new JPanel();
+        controlPanel.setLayout(new GridLayout(6,1));
+        controlPanel.setBackground(panelColor);
+        ipLabel = new JLabel("IP address");
         controlPanel.add(ipLabel);
-        JTextField ipAddress = new JTextField();
+        ipAddress = new JTextField();
         controlPanel.add(ipAddress);
-        JLabel nicknameLabel = new JLabel("Nickname");
+        nicknameLabel = new JLabel("Nickname");
         controlPanel.add(nicknameLabel);
-        JTextField nickname = new JTextField();
+        nickname = new JTextField();
         controlPanel.add(nickname);
-        JLabel ageLabel = new JLabel("Age");
+        ageLabel = new JLabel("Age");
         controlPanel.add(ageLabel);
-        JTextField age = new JTextField();
+        age = new JTextField();
         controlPanel.add(age);
-        JRadioButton guiButton = new JRadioButton("Play with GUI");
-        controlPanel.add(guiButton);
-        JRadioButton cliButton = new JRadioButton("Play with CLI");
-        controlPanel.add(cliButton);
-        add(controlPanel);
+        return controlPanel;
+    }
 
-        JPanel buttonPanel = new JPanel();
+    public JPanel createButtonPanel(){
+        buttonPanel = new JPanel();
         buttonPanel.setLayout(new FlowLayout());
-        JButton connectButton = new JButton("Connect to server");
+        buttonPanel.setBackground(panelColor);
+        connectButton = new JButton("Connect to server");
+        connectButton.addActionListener(this);
         buttonPanel.add(connectButton);
-        add(buttonPanel);
+        return buttonPanel;
     }
+
+
+    @Override
+    public void actionPerformed(ActionEvent e) {
+        if(e.getSource()==connectButton){
+
+        }
+    }
+
+    /*public void connectionHandling(String address){
+        try {
+            InetAddress addr = InetAddress.getByName(address);
+            serverSocket = new Socket(addr, 3456);
+            //System.out.println(InetAddress.getLocalHost());
+        } catch (IOException e) {
+            System.out.println("server unreachable");
+            return;
+        }
+        System.out.println("Connected");
+    }*/
 }

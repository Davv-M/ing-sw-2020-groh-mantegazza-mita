Index: src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/StartPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.PSP38.client.GUIComponents;\r\n\r\nimport it.polimi.ingsw.PSP38.client.GameModeGUI;\r\nimport it.polimi.ingsw.PSP38.client.ImageCollection;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URISyntaxException;\r\nimport java.util.Objects;\r\n\r\npublic class StartPanel implements ActionListener {\r\n    private JPanel setupPanel;\r\n    private JPanel controlPanel;\r\n    private JPanel buttonPanel;\r\n    private JLabel ipLabel;\r\n    private JTextField ipAddress;\r\n    private JLabel nicknameLabel;\r\n    private JTextField nickname;\r\n    private JLabel ageLabel;\r\n    private JTextField age;\r\n    private JButton connectButton;\r\n    private Color panelColor = new Color(0,0,0,0);\r\n    private Color bkgColor = new Color(25, 109,165);\r\n    private Color bkgTextColor = new Color(62,159,225);\r\n    private Color textColor  = Color.WHITE;\r\n    private JLabel errorMessage;\r\n    private GameModeGUI gameModeGUI;\r\n\r\n    public JPanel createSetupPanel(GameModeGUI gmg){\r\n        gameModeGUI=gmg;\r\n        setupPanel = new JPanel();\r\n        setupPanel.setLayout(new GridLayout(3,1));\r\n        setupPanel.setBackground(bkgColor);\r\n        setupPanel.add(createImagePanel());\r\n        setupPanel.add(createControlPanel());\r\n        setupPanel.add(createButtonPanel());\r\n        return setupPanel;\r\n    }\r\n\r\n    public JPanel createImagePanel() {\r\n        Image santoriniLogo=null;\r\n        JPanel imagePanel= new JPanel();\r\n        imagePanel.setBackground(panelColor);\r\n        File dir = null;\r\n        try {\r\n            dir = new File(Objects.requireNonNull(ImageCollection.class.getClassLoader()\r\n                    .getResource(\"santorini-logo.png\")).toURI());\r\n        } catch (URISyntaxException e) {\r\n            e.printStackTrace();\r\n        }\r\n        try {\r\n            santoriniLogo= ImageIO.read(dir);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        JLabel logoLabel = new JLabel(new ImageIcon(santoriniLogo));\r\n        imagePanel.add(logoLabel);\r\n        return imagePanel;\r\n    }\r\n    public JPanel createControlPanel(){\r\n        controlPanel = new JPanel();\r\n        controlPanel.setLayout(new GridLayout(7,1));\r\n        controlPanel.setBackground(panelColor);\r\n        ipLabel = new JLabel(\"IP address\");\r\n        ipLabel.setForeground(textColor);\r\n        controlPanel.add(ipLabel);\r\n        ipAddress = new JTextField();\r\n        ipAddress.setBackground(bkgTextColor);\r\n        controlPanel.add(ipAddress);\r\n        nicknameLabel = new JLabel(\"Nickname\");\r\n        nicknameLabel.setForeground(textColor);\r\n        controlPanel.add(nicknameLabel);\r\n        nickname = new JTextField();\r\n        nickname.setBackground(bkgTextColor);\r\n        controlPanel.add(nickname);\r\n        ageLabel = new JLabel(\"Age\");\r\n        ageLabel.setForeground(textColor);\r\n        controlPanel.add(ageLabel);\r\n        age = new JTextField();\r\n        age.setBackground(bkgTextColor);\r\n        controlPanel.add(age);\r\n        errorMessage = new JLabel( \"\");\r\n        errorMessage.setForeground(textColor);\r\n        errorMessage.setBackground(bkgColor);\r\n        controlPanel.add(errorMessage);\r\n        return controlPanel;\r\n    }\r\n\r\n    public JPanel createButtonPanel(){\r\n        buttonPanel = new JPanel();\r\n        buttonPanel.setLayout(new FlowLayout());\r\n        buttonPanel.setBackground(panelColor);\r\n        connectButton = new JButton(\"Connect to server\");\r\n        connectButton.addActionListener(this);\r\n        buttonPanel.add(connectButton);\r\n        return buttonPanel;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if(e.getSource()==connectButton){\r\n            if (nickname.getText().isEmpty() || ipAddress.getText().isEmpty() || age.getText().isEmpty()){\r\n                errorMessage.setText(\"tutti i campi sono obbligatori\");\r\n            }else {\r\n                gameModeGUI.setIP(ipAddress.getText());\r\n                gameModeGUI.setNickname(nickname.getText());\r\n                gameModeGUI.setAge(age.getText());\r\n                CardLayout cl = (CardLayout)(gameModeGUI.getSantoriniWindow().getCardHolder().getLayout());\r\n                cl.show(gameModeGUI.getSantoriniWindow().getCardHolder(), \"cardChoice\");\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/StartPanel.java	(revision 339a519bfcf37a233a34bdfea059bcfd32f308ad)
+++ src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/StartPanel.java	(date 1592489412581)
@@ -14,7 +14,7 @@
 import java.util.Objects;
 
 public class StartPanel implements ActionListener {
-    private JPanel setupPanel;
+    private JPanel startPanel;
     private JPanel controlPanel;
     private JPanel buttonPanel;
     private JLabel ipLabel;
@@ -31,15 +31,15 @@
     private JLabel errorMessage;
     private GameModeGUI gameModeGUI;
 
-    public JPanel createSetupPanel(GameModeGUI gmg){
+    public JPanel createStartPanel(GameModeGUI gmg){
         gameModeGUI=gmg;
-        setupPanel = new JPanel();
-        setupPanel.setLayout(new GridLayout(3,1));
-        setupPanel.setBackground(bkgColor);
-        setupPanel.add(createImagePanel());
-        setupPanel.add(createControlPanel());
-        setupPanel.add(createButtonPanel());
-        return setupPanel;
+        startPanel = new JPanel();
+        startPanel.setLayout(new GridLayout(3,1));
+        startPanel.setBackground(bkgColor);
+        startPanel.add(createImagePanel());
+        startPanel.add(createControlPanel());
+        startPanel.add(createButtonPanel());
+        return startPanel;
     }
 
     public JPanel createImagePanel() {
@@ -116,4 +116,8 @@
             }
         }
     }
+
+    public JPanel getStartPanel() {
+        return startPanel;
+    }
 }
Index: src/main/java/it/polimi/ingsw/PSP38/common/Message.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.PSP38.common;\r\n\r\n/**\r\n *Enumeration class that contains all the possible messages that can be shown to the user\r\n * @author Davide Mantegazza (10568661)\r\n */\r\npublic enum Message {\r\n    WELCOME,\r\n    INSERT_NUM_PLAYERS,\r\n    WAIT_FOR_NUM_PLAYERS,\r\n    GAME_FULL,\r\n    CHOOSE_NICKNAME,\r\n    SET_AGE,\r\n    WAIT_FOR_DIVINITIES,\r\n    NOT_YOUR_TURN,\r\n    PLACE_YOUR_WORKERS,\r\n    PLACE_A_WORKER,\r\n    SET_CELL_X_COORD,\r\n    SET_CELL_Y_COORD,\r\n    YOU_WIN,\r\n    YOU_LOSE,\r\n    SELECT_WORKER,\r\n    WORKER_NOT_YOURS,\r\n    ASK_SPECIAL_ACTION,\r\n    ILLEGAL_ACTION,\r\n    ILLEGAL_NICKNAME,\r\n    WAIT_FOR_FULL_GAME,\r\n    DIVINITY_CARD_NOT_EXISTS,\r\n    DIVINITY_CARD_CHOSEN,\r\n    ILLEGAL_YES_OR_NO,\r\n    ILLEGAL_DIVINITY,\r\n    DISPLAY_DIVINITY_MESSAGE,\r\n    DISPLAY_AVAILABLE_DIVINITIES,\r\n    ILLEGAL_INT,\r\n    ILLEGAL_STRING,\r\n    UNABLE_TO_FINISH_TURN,\r\n    ILLEGAL_ARGUMENT,\r\n    WORKER_MOVE,\r\n    WORKER_BUILD,\r\n    WORKER_OPTIONAL_ABILITY,\r\n    WAIT,\r\n    SERVER_UNREACHEABLE,\r\n    CONNECTED_TO_SERVER,\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/common/Message.java	(revision 339a519bfcf37a233a34bdfea059bcfd32f308ad)
+++ src/main/java/it/polimi/ingsw/PSP38/common/Message.java	(date 1592505270692)
@@ -1,7 +1,7 @@
 package it.polimi.ingsw.PSP38.common;
 
 /**
- *Enumeration class that contains all the possible messages that can be shown to the user
+ *Enumeration class that contains all the possible messages that the server is able to send to the clients connected to it
  * @author Davide Mantegazza (10568661)
  */
 public enum Message {
Index: src/main/java/it/polimi/ingsw/PSP38/client/GameModeCLI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.PSP38.client;\r\n\r\nimport it.polimi.ingsw.PSP38.common.Message;\r\n\r\nimport java.net.Socket;\r\nimport java.util.Scanner;\r\n\r\npublic class GameModeCLI implements GameMode {\r\n    private String customStringRead;\r\n    private final Scanner scanner = new Scanner(System.in);\r\n    private static Socket serverSocket;\r\n\r\n    /*public GameModeCLI(){\r\n       connectionHandling();\r\n    }*/\r\n\r\n    @Override\r\n    public void decodeMessage(Message m){\r\n        switch (m){\r\n            case WELCOME:\r\n                System.out.println(\"Welcome to Santorini\\n\");\r\n                break;\r\n            case INSERT_NUM_PLAYERS:\r\n                System.out.println(\"You are the first player to join this game. Please insert the number of players (between 2 and 3)\");\r\n                break;\r\n            case WAIT_FOR_NUM_PLAYERS:\r\n                System.out.println(\"Please wait for the first player to select the number of players.\");\r\n                break;\r\n            case GAME_FULL:\r\n                System.out.println(\"The game is currently full, please try later. If you want to see the match stay connected\");\r\n                break;\r\n            case CHOOSE_NICKNAME:\r\n                System.out.println(\"Choose your nickname\");\r\n                break;\r\n            case SET_AGE:\r\n                System.out.println(\"How old are you? (integer between 8 and 99)\");\r\n                break;\r\n            case WAIT_FOR_DIVINITIES:\r\n                System.out.println(\"Please wait for \"+customStringRead+\r\n                        \" to choose the divinity cards that will be used in this game\");\r\n                break;\r\n            case NOT_YOUR_TURN:\r\n                System.out.println(\"It's \"+customStringRead+\"'s turn, please wait\");\r\n                break;\r\n            case PLACE_YOUR_WORKERS:\r\n                System.out.println(\"Please place all of your workers on the board\");\r\n                break;\r\n            case PLACE_A_WORKER:\r\n                System.out.println(\"Place your worker number \"+customStringRead);\r\n                break;\r\n            case SET_CELL_X_COORD:\r\n                System.out.println(\"Please insert the cell's x coordinate\");\r\n                break;\r\n            case SET_CELL_Y_COORD:\r\n                System.out.println(\"Please insert the cell's y coordinate\");\r\n                break;\r\n            case YOU_WIN:\r\n                System.out.println(\"You are the winner!\");\r\n                break;\r\n            case YOU_LOSE:\r\n                System.out.println(\"You lose! The winner is \"+customStringRead);\r\n            case SELECT_WORKER:\r\n                System.out.println(\"Player, please select the worker you want to move\");//inserire nickname giocatore\r\n                break;\r\n            case WORKER_NOT_YOURS:\r\n                System.out.println(\"Player, this worker doesn't belong to you\");\r\n                break;\r\n            case ASK_SPECIAL_ACTION:\r\n                System.out.println(\"Do you want to use your special ability?\");\r\n                break;\r\n            case ILLEGAL_NICKNAME:\r\n                System.out.println(\"This nickname is unavailable, please choose another one\");\r\n                break;\r\n            case WAIT_FOR_FULL_GAME:\r\n                System.out.println(\"Hold on, all the players will be ready in a few seconds\");\r\n                break;\r\n            case DIVINITY_CARD_NOT_EXISTS:\r\n                System.out.println(\"This divinity card doesn't exist. Please select a new one\");\r\n                break;\r\n            case DIVINITY_CARD_CHOSEN:\r\n                System.out.println(\"This divinity card has already been chosen. Please select a new one\");\r\n                break;\r\n            case ILLEGAL_YES_OR_NO:\r\n                System.out.println(\"Please answer with either \\\"yes\\\" or \\\"no\\\"\");\r\n                break;\r\n            case ILLEGAL_DIVINITY:\r\n                System.out.println(\"Illegal divinity card\");\r\n                break;\r\n            case DISPLAY_DIVINITY_MESSAGE:\r\n                System.out.println(customStringRead+\", please select a divinity card from this list :\\n\");\r\n                break;\r\n            case DISPLAY_AVAILABLE_DIVINITIES:\r\n                System.out.println(customStringRead);\r\n                break;\r\n            case ILLEGAL_INT:\r\n                System.out.println(\"Integer not recognized exception: \"+customStringRead);\r\n                break;\r\n            case ILLEGAL_STRING:\r\n                System.out.println(\"String not recognized exception: \"+customStringRead);\r\n                break;\r\n            case UNABLE_TO_FINISH_TURN:\r\n                System.out.println(\"You can't finish your turn. You lose.\");\r\n                break;\r\n            case ILLEGAL_ARGUMENT:\r\n                System.out.println(\"Illegal argument exception: \"+customStringRead);\r\n                break;\r\n            case WORKER_MOVE:\r\n                System.out.println(\"Select the cell where you want to move\");\r\n                break;\r\n            case WORKER_BUILD:\r\n                System.out.println(\"Select the cell where you want to build\");\r\n                break;\r\n            case WORKER_OPTIONAL_ABILITY:\r\n                System.out.println(\"Select the cell where you want to DAFARE\");\r\n                break;\r\n            case ILLEGAL_ACTION:\r\n                System.out.println(\"Unknown worker action\");\r\n                break;\r\n            case WAIT:\r\n                System.out.println(\"Please wait\");\r\n                break;\r\n            case SERVER_UNREACHEABLE:\r\n                System.out.println(\"Server unreachable\");\r\n                break;\r\n            case CONNECTED_TO_SERVER:\r\n                System.out.println(\"Connected\");\r\n                break;\r\n            default:\r\n                System.out.println(\"Message not recognized\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void updateCustomString() {\r\n        customStringRead=Client.getCustomString();\r\n    }\r\n\r\n    @Override\r\n    public String nextInput() {\r\n        return scanner.nextLine();\r\n    }\r\n\r\n    @Override\r\n    public void displayBoard() {\r\n        BoardPrinter.printBoard(ServerHandler.readBoard());\r\n    }\r\n\r\n    @Override\r\n    public void setStringRead(String dataRead) {\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /*public void connectionHandling(){\r\n        try {\r\n            System.out.println(\"insert Server IP address:\");\r\n            String ipAddress= scanner.nextLine();\r\n            InetAddress address = InetAddress.getByName(ipAddress);\r\n            serverSocket = new Socket(address, SERVER_SOCKET_PORT);\r\n            ServerHandler serverHandler = new ServerHandler(serverSocket);\r\n            Client.setObserver(serverHandler);\r\n            Thread thread = new Thread(serverHandler);\r\n            thread.start();\r\n        } catch (IOException e) {\r\n            System.out.println(\"server unreachable\");\r\n            return;\r\n        }\r\n        System.out.println(\"Connected\");\r\n    }*/\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/client/GameModeCLI.java	(revision 339a519bfcf37a233a34bdfea059bcfd32f308ad)
+++ src/main/java/it/polimi/ingsw/PSP38/client/GameModeCLI.java	(date 1592505270665)
@@ -5,6 +5,7 @@
 import java.net.Socket;
 import java.util.Scanner;
 
+
 public class GameModeCLI implements GameMode {
     private String customStringRead;
     private final Scanner scanner = new Scanner(System.in);
Index: src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/SantoriniWindow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.PSP38.client.GUIComponents;\r\n\r\nimport it.polimi.ingsw.PSP38.client.Client;\r\nimport it.polimi.ingsw.PSP38.client.GameModeGUI;\r\nimport it.polimi.ingsw.PSP38.client.ImageCollection;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.URISyntaxException;\r\nimport java.util.Objects;\r\nimport java.util.Observable;\r\n\r\npublic class SantoriniWindow extends Observable /*implements ActionListener*/ {\r\n    public static final int WIDTH = 550;\r\n    public static final int HEIGHT = 650;\r\n    private JFrame mainSetupFrame = new JFrame();\r\n    private JPanel cardHolder;\r\n    private JPanel setupPanel;\r\n    private JPanel controlPanel;\r\n    private JPanel buttonPanel;\r\n    private JLabel ipLabel;\r\n    private JTextField ipAddress;\r\n    private JLabel nicknameLabel;\r\n    private JTextField nickname;\r\n    private JLabel ageLabel;\r\n    private JTextField age;\r\n    private JButton connectButton;\r\n    private Color panelColor = new Color(0,0,0,0);\r\n    private Color bkgColor = new Color(25, 109,165);\r\n    private Color bkgTextColor = new Color(62,159,225);\r\n    private Color textColor  = Color.WHITE;\r\n    private final static Client clientUpdate = new Client();\r\n    private static GameModeGUI gameModeGUI;\r\n    private JLabel errorMessage;\r\n    private StartPanel startPanel;\r\n    private CardChoicePanel cardChoicePanel;\r\n\r\n    public JFrame createSantoriniWindow(GameModeGUI gmg){\r\n        gameModeGUI=gmg;\r\n        mainSetupFrame.setSize(WIDTH, HEIGHT);\r\n        mainSetupFrame.setTitle(\"Santorini\");\r\n        mainSetupFrame.add(createCardHolder());\r\n        mainSetupFrame.setVisible(true);\r\n        return mainSetupFrame;\r\n    }\r\n\r\n    public JPanel createCardHolder(){\r\n        cardHolder = new JPanel();\r\n        cardHolder.setLayout(new CardLayout());\r\n        startPanel=new StartPanel();\r\n        cardHolder.add(startPanel.createSetupPanel(gameModeGUI), \"setup\");\r\n        cardChoicePanel=new CardChoicePanel();\r\n        cardHolder.add(cardChoicePanel.createMainCardPanel(gameModeGUI), \"cardChoice\");\r\n        return cardHolder;\r\n    }\r\n\r\n    /*public JPanel createSetupPanel(){\r\n        setupPanel = new JPanel();\r\n        setupPanel.setLayout(new GridLayout(3,1));\r\n        setupPanel.setBackground(bkgColor);\r\n        setupPanel.add(createImagePanel());\r\n        setupPanel.add(createControlPanel());\r\n        setupPanel.add(createButtonPanel());\r\n        return setupPanel;\r\n    }\r\n\r\n    public JPanel createImagePanel() {\r\n        Image santoriniLogo=null;\r\n        JPanel imagePanel= new JPanel();\r\n        imagePanel.setBackground(panelColor);\r\n        File dir = null;\r\n        try {\r\n            dir = new File(Objects.requireNonNull(ImageCollection.class.getClassLoader()\r\n                    .getResource(\"santorini-logo.png\")).toURI());\r\n        } catch (URISyntaxException e) {\r\n            e.printStackTrace();\r\n        }\r\n        try {\r\n            santoriniLogo= ImageIO.read(dir);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        JLabel logoLabel = new JLabel(new ImageIcon(santoriniLogo));\r\n        imagePanel.add(logoLabel);\r\n        return imagePanel;\r\n    }\r\n    public JPanel createControlPanel(){\r\n        controlPanel = new JPanel();\r\n        controlPanel.setLayout(new GridLayout(7,1));\r\n        controlPanel.setBackground(panelColor);\r\n        ipLabel = new JLabel(\"IP address\");\r\n        ipLabel.setForeground(textColor);\r\n        controlPanel.add(ipLabel);\r\n        ipAddress = new JTextField();\r\n        ipAddress.setBackground(bkgTextColor);\r\n        controlPanel.add(ipAddress);\r\n        nicknameLabel = new JLabel(\"Nickname\");\r\n        nicknameLabel.setForeground(textColor);\r\n        controlPanel.add(nicknameLabel);\r\n        nickname = new JTextField();\r\n        nickname.setBackground(bkgTextColor);\r\n        controlPanel.add(nickname);\r\n        ageLabel = new JLabel(\"Age\");\r\n        ageLabel.setForeground(textColor);\r\n        controlPanel.add(ageLabel);\r\n        age = new JTextField();\r\n        age.setBackground(bkgTextColor);\r\n        controlPanel.add(age);\r\n        errorMessage = new JLabel( \"\");\r\n        errorMessage.setForeground(textColor);\r\n        errorMessage.setBackground(bkgColor);\r\n        controlPanel.add(errorMessage);\r\n        return controlPanel;\r\n    }\r\n\r\n    public JPanel createButtonPanel(){\r\n        buttonPanel = new JPanel();\r\n        buttonPanel.setLayout(new FlowLayout());\r\n        buttonPanel.setBackground(panelColor);\r\n        connectButton = new JButton(\"Connect to server\");\r\n        connectButton.addActionListener(this);\r\n        buttonPanel.add(connectButton);\r\n        return buttonPanel;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if(e.getSource()==connectButton){\r\n            if (nickname.getText().isEmpty() || ipAddress.getText().isEmpty() || age.getText().isEmpty()){\r\n                errorMessage.setText(\"tutti i campi sono obbligatori\");\r\n            }else {\r\n                gameModeGUI.setIP(ipAddress.getText());\r\n                gameModeGUI.setNickname(nickname.getText());\r\n                gameModeGUI.setAge(age.getText());\r\n            }\r\n        }\r\n    }*/\r\n\r\n    /*@Override\r\n    public void actionPerformed(ActionEvent e) {\r\n        if(e.getSource()==connectButton){\r\n            if (nickname.getText()==null||ipAddress.getText()==null||age.getText()==null){\r\n                System.out.println(\"errore inserimento\");\r\n            }else {\r\n                gameModeGUI.setIP(ipAddress.getText());\r\n                gameModeGUI.setNickname(nickname.getText());\r\n                gameModeGUI.setAge(age.getText());\r\n                System.out.println(\"Pronto\");\r\n            }\r\n        }\r\n    }*/\r\n\r\n    /*public void connectionHandling(String address){\r\n        try {\r\n            InetAddress addr = InetAddress.getByName(address);\r\n            serverSocket = new Socket(addr, 3456);\r\n            //System.out.println(InetAddress.getLocalHost());\r\n        } catch (IOException e) {\r\n            System.out.println(\"server unreachable\");\r\n            return;\r\n        }\r\n        System.out.println(\"Connected\");\r\n    }*/\r\n\r\n    public JFrame getMainSetupFrame() {\r\n        return mainSetupFrame;\r\n    }\r\n\r\n    public JPanel getCardHolder() {\r\n        return cardHolder;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/SantoriniWindow.java	(revision 339a519bfcf37a233a34bdfea059bcfd32f308ad)
+++ src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/SantoriniWindow.java	(date 1592489412604)
@@ -2,17 +2,9 @@
 
 import it.polimi.ingsw.PSP38.client.Client;
 import it.polimi.ingsw.PSP38.client.GameModeGUI;
-import it.polimi.ingsw.PSP38.client.ImageCollection;
 
-import javax.imageio.ImageIO;
 import javax.swing.*;
 import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.io.File;
-import java.io.IOException;
-import java.net.URISyntaxException;
-import java.util.Objects;
 import java.util.Observable;
 
 public class SantoriniWindow extends Observable /*implements ActionListener*/ {
@@ -20,7 +12,7 @@
     public static final int HEIGHT = 650;
     private JFrame mainSetupFrame = new JFrame();
     private JPanel cardHolder;
-    private JPanel setupPanel;
+    /*private JPanel setupPanel;
     private JPanel controlPanel;
     private JPanel buttonPanel;
     private JLabel ipLabel;
@@ -33,7 +25,7 @@
     private Color panelColor = new Color(0,0,0,0);
     private Color bkgColor = new Color(25, 109,165);
     private Color bkgTextColor = new Color(62,159,225);
-    private Color textColor  = Color.WHITE;
+    private Color textColor  = Color.WHITE;*/
     private final static Client clientUpdate = new Client();
     private static GameModeGUI gameModeGUI;
     private JLabel errorMessage;
@@ -53,13 +45,13 @@
         cardHolder = new JPanel();
         cardHolder.setLayout(new CardLayout());
         startPanel=new StartPanel();
-        cardHolder.add(startPanel.createSetupPanel(gameModeGUI), "setup");
+        cardHolder.add(startPanel.createStartPanel(gameModeGUI), "setup");
         cardChoicePanel=new CardChoicePanel();
         cardHolder.add(cardChoicePanel.createMainCardPanel(gameModeGUI), "cardChoice");
         return cardHolder;
     }
 
-    /*public JPanel createSetupPanel(){
+    /*public JPanel createStartPanel(){
         setupPanel = new JPanel();
         setupPanel.setLayout(new GridLayout(3,1));
         setupPanel.setBackground(bkgColor);
@@ -175,4 +167,8 @@
     public JPanel getCardHolder() {
         return cardHolder;
     }
+
+    public StartPanel getStartPanel() {
+        return startPanel;
+    }
 }
Index: src/main/java/it/polimi/ingsw/PSP38/client/GameModeGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.PSP38.client;\r\n\r\n//import it.polimi.ingsw.PSP38.client.GUIComponents.ConnectionComponent;\r\nimport it.polimi.ingsw.PSP38.client.GUIComponents.SantoriniWindow;\r\nimport it.polimi.ingsw.PSP38.common.Message;\r\n\r\nimport javax.swing.*;\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\n\r\npublic class GameModeGUI implements GameMode {\r\n    volatile boolean isDataReady = false;\r\n    private String dataReadFromClient;\r\n    private static String nickname = \"anonymous\";\r\n    private static String age;\r\n    private JFrame frame;\r\n    private String customStringRead;\r\n    private SantoriniWindow santoriniWindow;\r\n\r\n\r\n    public GameModeGUI() throws InvocationTargetException, InterruptedException {\r\n        SwingUtilities.invokeAndWait(() -> {\r\n            santoriniWindow =new SantoriniWindow();\r\n            frame = santoriniWindow.createSantoriniWindow(this);\r\n        });\r\n    }\r\n\r\n    public JFrame getFrame(){return frame;}\r\n\r\n\r\n    public void insertNumPlayer() {\r\n        Object[] options = {\"2\", \"3\"};\r\n                int n = JOptionPane.showOptionDialog(santoriniWindow.getMainSetupFrame(),\r\n                        \"You are the first player to join this game. Please insert the number of players\",\r\n                        null,\r\n                        JOptionPane.YES_NO_OPTION,\r\n                        JOptionPane.QUESTION_MESSAGE,\r\n                        null,\r\n                        options,\r\n                        null);\r\n                if (n==JOptionPane.YES_OPTION){\r\n                    setStringRead(\"2\");\r\n\r\n                }else if(n==JOptionPane.NO_OPTION){\r\n                    setStringRead(\"3\");\r\n                }\r\n    }\r\n\r\n\r\n\r\n    public void waitForNumPlayer() {\r\n        System.out.println(\"Please wait for the first player to select the number of players.\");\r\n    }\r\n\r\n    public void gameFull() {\r\n        System.out.println(\"The game is currently full, please try later. If you want to see the match stay connected\");\r\n    }\r\n\r\n    public void chooseNickname() {\r\n        System.out.println(\"inserisci il tuo nickname:\");\r\n        setStringRead(nickname);\r\n        System.out.println(\"nickname mandato\");\r\n    }\r\n\r\n    public void setAge() {\r\n        System.out.println(\"inserisci la tua eta:\");\r\n        setStringRead(age);\r\n        System.out.println(\"eta mandata\");\r\n\r\n    }\r\n\r\n    public void waitForDivinities() {\r\n        System.out.println(\"Please wait for \" + customStringRead + \" to choose the divinity cards that will be used in this game\");\r\n    }\r\n\r\n    public void notYourTurn() {\r\n        System.out.println(\"It's \" + customStringRead + \"'s turn, please wait\");\r\n    }\r\n\r\n    public void placeYourWorkers() {\r\n        System.out.println(\"Please place all of your workers on the board\");\r\n    }\r\n\r\n\r\n    public void placeAWorker() {\r\n        System.out.println(\"Place your worker number \" + customStringRead);\r\n    }\r\n\r\n    public void setCellXCoordinate() {\r\n        System.out.println(\"Please insert the cell's x coordinate\");\r\n    }\r\n\r\n    public void setCellYCoordinate() {\r\n        System.out.println(\"Please insert the cell's y coordinate\");\r\n    }\r\n\r\n    public void youWin() {\r\n        System.out.println(\"You are the winner!\");\r\n    }\r\n\r\n    public void youLose() {\r\n        System.out.println(\"You lose! The winner is \" + customStringRead);\r\n    }\r\n\r\n    public void illegalString() {\r\n        System.out.println(\"String not recognized exception: \" + customStringRead);\r\n    }\r\n\r\n    public void illegalInt() {\r\n        System.out.println(\"Integer not recognized exception: \" + customStringRead);\r\n    }\r\n\r\n    public void illegalArgument() {\r\n        System.out.println(\"Illegal argument exception: \" + customStringRead);\r\n    }\r\n\r\n    public void illegalNickname() {\r\n        System.out.println(\"This nickname is unavailable, please choose another one\");\r\n    }\r\n\r\n    public void waitForFullGame() {\r\n        System.out.println(\"Hold on, all the players will be ready in a few seconds\");\r\n    }\r\n\r\n    public void divinityCardNotExists() {\r\n        System.out.println(\"This divinity card doesn't exist. Please select a new one\");\r\n    }\r\n\r\n    public void divinityCardChosen() {\r\n        System.out.println(\"This divinity card has already been chosen. Please select a new one\");\r\n    }\r\n\r\n    public void illegalYesOrNo() {\r\n        System.out.println(\"Please answer with either \\\"yes\\\" or \\\"no\\\"\");\r\n    }\r\n\r\n    public void illegalDivinity() {\r\n        System.out.println(\"Illegal divinity card\");\r\n    }\r\n\r\n    public void selectWorker() {\r\n        System.out.println(\"Player, please select the worker you want to move\");//inserire nickname giocatore\r\n    }\r\n\r\n\r\n    public void waitYourTurn() {\r\n        System.out.println(\"please wait\");\r\n\r\n    }\r\n\r\n    private void workerNotYours() {\r\n        System.out.println(\"Player, this worker doesn't belong to you\");\r\n    }\r\n\r\n    private void displayAvailableDivinities() {\r\n        System.out.println(customStringRead);\r\n    }\r\n\r\n    private void display_divinity_message() {\r\n        System.out.println(customStringRead + \", please select a divinity card from this list :\\n\");\r\n    }\r\n\r\n    private void unableToFinishTurn() {\r\n        System.out.println(\"You can't finish your turn. You lose.\");\r\n    }\r\n\r\n    private void workerMove() {\r\n        System.out.println(\"Select the cell where you want to move\");\r\n    }\r\n\r\n    private void workerBuild() {\r\n        System.out.println(\"Select the cell where you want to build\");\r\n    }\r\n\r\n    private void workerOptionalAbility() {\r\n        System.out.println(\"Select the cell where you want to DAFARE\");\r\n    }\r\n\r\n    private void illegalAction() {\r\n        System.out.println(\"Unknown worker action\");\r\n    }\r\n\r\n    private void askSpecialAction() {\r\n        System.out.println(\"Do you want to use your special ability\");\r\n    }\r\n\r\n\r\n    @Override\r\n    public void decodeMessage(Message m) {\r\n        switch (m) {\r\n            case WELCOME:\r\n                break;\r\n            case INSERT_NUM_PLAYERS:\r\n                insertNumPlayer();\r\n                break;\r\n            case WAIT_FOR_NUM_PLAYERS:\r\n                waitForNumPlayer();\r\n                break;\r\n            case GAME_FULL:\r\n                gameFull();\r\n                break;\r\n            case CHOOSE_NICKNAME:\r\n                chooseNickname();\r\n                break;\r\n            case SET_AGE:\r\n                setAge();\r\n                break;\r\n            case WAIT_FOR_DIVINITIES:\r\n                waitForDivinities();\r\n                break;\r\n            case NOT_YOUR_TURN:\r\n                notYourTurn();\r\n                break;\r\n            case PLACE_YOUR_WORKERS:\r\n                placeYourWorkers();\r\n                break;\r\n            case PLACE_A_WORKER:\r\n                placeAWorker();\r\n                break;\r\n            case SET_CELL_X_COORD:\r\n                setCellXCoordinate();\r\n                break;\r\n            case SET_CELL_Y_COORD:\r\n                setCellYCoordinate();\r\n                break;\r\n            case YOU_WIN:\r\n                youWin();\r\n                break;\r\n            case YOU_LOSE:\r\n                youLose();\r\n            case SELECT_WORKER:\r\n                selectWorker();\r\n                break;\r\n            case WORKER_NOT_YOURS:\r\n                workerNotYours();\r\n                break;\r\n            case ASK_SPECIAL_ACTION:\r\n                askSpecialAction();\r\n                break;\r\n            case ILLEGAL_NICKNAME:\r\n                illegalNickname();\r\n                break;\r\n            case WAIT_FOR_FULL_GAME:\r\n                waitForFullGame();\r\n                break;\r\n            case DIVINITY_CARD_NOT_EXISTS:\r\n                divinityCardNotExists();\r\n                break;\r\n            case DIVINITY_CARD_CHOSEN:\r\n                divinityCardChosen();\r\n                break;\r\n            case ILLEGAL_YES_OR_NO:\r\n                illegalYesOrNo();\r\n                break;\r\n            case ILLEGAL_DIVINITY:\r\n                illegalDivinity();\r\n                break;\r\n            case DISPLAY_DIVINITY_MESSAGE:\r\n                display_divinity_message();\r\n                break;\r\n            case DISPLAY_AVAILABLE_DIVINITIES:\r\n                displayAvailableDivinities();\r\n                break;\r\n            case ILLEGAL_INT:\r\n                illegalInt();\r\n                break;\r\n            case ILLEGAL_STRING:\r\n                illegalString();\r\n                break;\r\n            case UNABLE_TO_FINISH_TURN:\r\n                unableToFinishTurn();\r\n                break;\r\n            case ILLEGAL_ARGUMENT:\r\n                illegalArgument();\r\n                break;\r\n            case WORKER_MOVE:\r\n                workerMove();\r\n                break;\r\n            case WORKER_BUILD:\r\n                workerBuild();\r\n                break;\r\n            case WORKER_OPTIONAL_ABILITY:\r\n                workerOptionalAbility();\r\n                break;\r\n            case ILLEGAL_ACTION:\r\n                illegalAction();\r\n                break;\r\n            case WAIT:\r\n                waitYourTurn();\r\n                break;\r\n            case CONNECTED_TO_SERVER:\r\n                break;\r\n            default:\r\n                System.out.println(\"Message not recognized\\n\");\r\n                System.out.println(m);\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void updateCustomString() {\r\n        customStringRead = Client.getCustomString();\r\n\r\n    }\r\n\r\n    @Override\r\n    public String nextInput() {\r\n        while (!isDataReady) {\r\n            Thread.onSpinWait();\r\n        }\r\n        isDataReady = false;\r\n        return dataReadFromClient;\r\n\r\n    }\r\n\r\n    @Override\r\n    public void setStringRead(String dataRead) {\r\n        dataReadFromClient = dataRead;\r\n        isDataReady = true;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void displayBoard() {\r\n\r\n    }\r\n\r\n    public static void setIP(String ipAddress){\r\n        Client.connectionHandling(ipAddress,Client.getServerSocketPort());\r\n    }\r\n\r\n    public static void setNickname(String nicknameRead){\r\n        nickname=nicknameRead;\r\n    }\r\n\r\n    public static void setAge(String ageRead){\r\n        age=ageRead;\r\n    }\r\n\r\n    public SantoriniWindow getSantoriniWindow() {\r\n        return santoriniWindow;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/client/GameModeGUI.java	(revision 339a519bfcf37a233a34bdfea059bcfd32f308ad)
+++ src/main/java/it/polimi/ingsw/PSP38/client/GameModeGUI.java	(date 1592489412560)
@@ -30,7 +30,7 @@
 
     public void insertNumPlayer() {
         Object[] options = {"2", "3"};
-                int n = JOptionPane.showOptionDialog(santoriniWindow.getMainSetupFrame(),
+                int n = JOptionPane.showOptionDialog(santoriniWindow.getStartPanel().getStartPanel(),
                         "You are the first player to join this game. Please insert the number of players",
                         null,
                         JOptionPane.YES_NO_OPTION,
Index: src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/CardChoicePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polimi.ingsw.PSP38.client.GUIComponents;\r\n\r\nimport it.polimi.ingsw.PSP38.client.GameMode;\r\nimport it.polimi.ingsw.PSP38.client.GameModeGUI;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\n\r\npublic class CardChoicePanel {\r\n    private static JPanel mainCardPanel;\r\n    private static JPanel cardDescriptionPanel;\r\n    private GameModeGUI gameModeGUI;\r\n\r\n    public JPanel createMainCardPanel(GameModeGUI gmg){\r\n        gameModeGUI=gmg;\r\n        mainCardPanel = new JPanel(new BorderLayout());\r\n        mainCardPanel.add(createDescriptionPanel(), BorderLayout.SOUTH);\r\n        return mainCardPanel;\r\n    }\r\n\r\n    public JPanel createDescriptionPanel(){\r\n        cardDescriptionPanel = new JPanel();\r\n        return cardDescriptionPanel;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/CardChoicePanel.java	(revision 339a519bfcf37a233a34bdfea059bcfd32f308ad)
+++ src/main/java/it/polimi/ingsw/PSP38/client/GUIComponents/CardChoicePanel.java	(date 1592510672648)
@@ -1,14 +1,14 @@
 package it.polimi.ingsw.PSP38.client.GUIComponents;
 
-import it.polimi.ingsw.PSP38.client.GameMode;
 import it.polimi.ingsw.PSP38.client.GameModeGUI;
 
 import javax.swing.*;
 import java.awt.*;
 
 public class CardChoicePanel {
-    private static JPanel mainCardPanel;
-    private static JPanel cardDescriptionPanel;
+    private JPanel mainCardPanel;
+    private JPanel cardDescriptionPanel;
+    private JPanel cardButtonsPanel;
     private GameModeGUI gameModeGUI;
 
     public JPanel createMainCardPanel(GameModeGUI gmg){
@@ -18,8 +18,17 @@
         return mainCardPanel;
     }
 
+    public JPanel createCardButtonsPanel(){
+        cardButtonsPanel = new JPanel(new GridLayout(14,1));
+        return cardButtonsPanel;
+    }
+
     public JPanel createDescriptionPanel(){
         cardDescriptionPanel = new JPanel();
         return cardDescriptionPanel;
     }
+
+    public void initializeButtonPanel(){
+
+    }
 }
Index: src/main/java/it/polimi/ingsw/PSP38/common/DivinityNames.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/it/polimi/ingsw/PSP38/common/DivinityNames.java	(date 1592510672591)
+++ src/main/java/it/polimi/ingsw/PSP38/common/DivinityNames.java	(date 1592510672591)
@@ -0,0 +1,18 @@
+package it.polimi.ingsw.PSP38.common;
+
+public enum DivinityNames {
+    APOLLO,
+    ARES,
+    ARTEMIS,
+    ATHENA,
+    ATLAS,
+    CHARON,
+    DEMETER,
+    HEPHAESTUS,
+    HERA,
+    HESTIA,
+    MINOTAUR,
+    PAN,
+    PROMETHEUS,
+    ZEUS
+}

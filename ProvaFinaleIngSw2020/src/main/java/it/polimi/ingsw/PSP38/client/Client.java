package it.polimi.ingsw.PSP38.client;

import it.polimi.ingsw.PSP38.common.Protocol;

import java.util.Observable;
import java.util.Scanner;


/**
 *
 * this class is responsible for showing to users all new messages from the server, the last board updated
 * and notify the class Client for all user inputs
 */
public class Client extends Observable implements Observer, Runnable {
    private final static ServerHandler nextInputObserver = new ServerHandler();
    private static final Scanner scanner = new Scanner(System.in);
    private static String dataInput;
    //private static BoardComponent sc;

    /**
     * This thread read all client's input and notify class Client when read a new data
     */
    @Override
    public void run(){
        //SetupWindow setw = new SetupWindow();
        //setw.setVisible(true);
        while(true){
            dataInput = scanner.nextLine();
            notifyReadSomething();
        }
    }

    /**
     * This method is used to show messages generated by the server on client's screen
     * @param message is the last message received
     */
    private void printMessage(String message){
        System.out.println(message);
    }

    /**
     * This method is used to show the game's board generated by the server on client's screen
     */
    private void displayBoard(){
        BoardPrinter.printBoard(ServerHandler.readBoard());
    }

    /**
     * When Client class receives a new protocol from the server this methods call </@printMessage()> or </displayBoard> to show the new update
     */
    @Override
    public void update(){
        Protocol protocolRead = ServerHandler.getProtocol();
            if(protocolRead == Protocol.NOTIFY_MESSAGE) {
                printMessage(ServerHandler.getMessage());
            }
            if(protocolRead == Protocol.DISPLAY_BOARD) {
                displayBoard();
            }
    }

    /**
     * @return the last data read
     */
    public static String getStringInput(){
        return dataInput;
    }

    /**
     * notify observers that is available a new data input from the client
     */
    private static void notifyReadSomething(){
        nextInputObserver.update();
    }

    /*public static void createUI() {
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        sc = new BoardComponent();
        frame.add(sc);
        frame.getContentPane().setPreferredSize(sc.getPreferredSize());
        frame.pack();
        frame.setVisible(true);
        sc.requestFocusInWindow();
    }*/
}

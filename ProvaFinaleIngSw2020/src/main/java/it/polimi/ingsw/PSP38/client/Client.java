package it.polimi.ingsw.PSP38.client;

import it.polimi.ingsw.PSP38.common.Protocol;
import it.polimi.ingsw.PSP38.common.utilities.Observer;

import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Observable;
import java.util.Scanner;


/**
 * Executable class for the client side of Santorini
 * this class is responsible for showing to users all new messages from the server, the last board updated
 * and notify the class Client for all user inputs
 */
public class Client extends Observable implements Observer {
    private final static int SERVER_SOCKET_PORT = 3456;
    private static final Scanner scanner = new Scanner(System.in);
    private static String dataInput;
    private static ServerHandler nextInputObserver;
    //private static BoardComponent sc;

    public static void main(String[] args) {
        //SetupWindow setw = new SetupWindow();
        //setw.setVisible(true);
        Socket serverSocket;
        try {
            serverSocket = new Socket(InetAddress.getLocalHost(), SERVER_SOCKET_PORT);
            System.out.println(InetAddress.getLocalHost());
            ServerHandler serverHandler = new ServerHandler(serverSocket);
            nextInputObserver = serverHandler;
            Thread thread = new Thread(serverHandler);
            thread.start();
        } catch (IOException e) {
            System.out.println("server unreachable");
            return;
        }
        System.out.println("Connected");
        while(true){
            dataInput = scanner.nextLine();
            notifyReadSomething();
        }
    }


    /**
     * This method is used to show messages generated by the server on client's screen
     * @param message is the last message received
     */
    private static void printMessage(String message){
        System.out.println(message);
    }

    /**
     * This method is used to show the game's board generated by the server on client's screen
     */
    private static void displayBoard(){
        BoardPrinter.printBoard(ServerHandler.readBoard());
    }

    /**
     * When Client class receives a new protocol from the server this methods call </@printMessage()> or </displayBoard> to show the new update
     */
    @Override
    public void update(){
        Protocol protocolRead = ServerHandler.getProtocol();
            if(protocolRead == Protocol.NOTIFY_MESSAGE) {
                printMessage(ServerHandler.getMessage());
            }
            if(protocolRead == Protocol.DISPLAY_BOARD) {
                displayBoard();
            }
    }

    /**
     * @return the last data read
     */
    public static String getStringInput(){
        return dataInput;
    }

    /**
     * notify observers that is available a new data input from the client
     */
    private static void notifyReadSomething(){
        Protocol protocolRead = ServerHandler.getProtocol();
        if(protocolRead == Protocol.ASK_INT || protocolRead == Protocol.ASK_STRING ){
            nextInputObserver.update();
        }else{
            printMessage("Please wait");
        }

    }

    /*public static void createUI() {
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        sc = new BoardComponent();
        frame.add(sc);
        frame.getContentPane().setPreferredSize(sc.getPreferredSize());
        frame.pack();
        frame.setVisible(true);
        sc.requestFocusInWindow();
    }*/
}
